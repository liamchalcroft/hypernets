from setuptools import setup, find_namespace_packages

setup(
    name="hypunet",
    packages=find_namespace_packages(include=["hypunet", "hypunet.*"]),
    version="1.7.0",
    description="hypunet. Hypernetwork adaptation of hypunet.",
    url="https://github.com/liamchalcroft/hypernets",
    author="",
    author_email="",
    license="Apache License Version 2.0, January 2004",
    install_requires=[
        "torch>1.10.0",
        "tqdm",
        "dicom2nifti",
        "scikit-image>=0.14",
        "medpy",
        "scipy",
        "batchgenerators>=0.23",
        "numpy",
        "sklearn",
        "SimpleITK",
        "pandas",
        "requests",
        "nibabel",
        "tifffile",
        "matplotlib",
        "GradCache @ git+https://github.com/liamchalcroft/GradCache.git",
        "solo-learn @ git+https://github.com/vturrisi/solo-learn.git",
    ],
    entry_points={
        "console_scripts": [
            "hypunet_convert_decathlon_task = hypunet.experiment_planning.hypunet_convert_decathlon_task:main",
            "hypunet_plan_and_preprocess = hypunet.experiment_planning.hypunet_plan_and_preprocess:main",
            "hypunet_train = hypunet.run.run_training:main",
            "hypunet_train_DP = hypunet.run.run_training_DP:main",
            "hypunet_train_DDP = hypunet.run.run_training_DDP:main",
            "hypunet_predict = hypunet.inference.predict_simple:main",
            "hypunet_ensemble = hypunet.inference.ensemble_predictions:main",
            "hypunet_find_best_configuration = hypunet.evaluation.model_selection.figure_out_what_to_submit:main",
            "hypunet_print_available_pretrained_models = hypunet.inference.pretrained_models.download_pretrained_model:print_available_pretrained_models",
            "hypunet_print_pretrained_model_info = hypunet.inference.pretrained_models.download_pretrained_model:print_pretrained_model_requirements",
            "hypunet_download_pretrained_model = hypunet.inference.pretrained_models.download_pretrained_model:download_by_name",
            "hypunet_download_pretrained_model_by_url = hypunet.inference.pretrained_models.download_pretrained_model:download_by_url",
            "hypunet_determine_postprocessing = hypunet.postprocessing.consolidate_postprocessing_simple:main",
            "hypunet_export_model_to_zip = hypunet.inference.pretrained_models.collect_pretrained_models:export_entry_point",
            "hypunet_install_pretrained_model_from_zip = hypunet.inference.pretrained_models.download_pretrained_model:install_from_zip_entry_point",
            "hypunet_change_trainer_class = hypunet.inference.change_trainer:main",
            "hypunet_evaluate_folder = hypunet.evaluation.evaluator:hypunet_evaluate_folder",
            "hypunet_plot_task_pngs = hypunet.utilities.overlay_plots:entry_point_generate_overlay",
        ],
    },
    keywords=[
        "deep learning",
        "image segmentation",
        "medical image analysis",
        "medical image segmentation",
        "hypunet",
        "hypunet",
    ],
)
